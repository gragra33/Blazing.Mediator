# Set the project URL for the running API
@projectUrl = https://localhost:54336

###
# E-Commerce API - Complete HTTP Requests Collection with Real-Time Statistics
# This file demonstrates ALL endpoints available in the ECommerce.Api sample project
# showcasing the Blazing.Mediator library with CQRS patterns, notifications, and real-time statistics.
#
# 🔔 NOTIFICATION SYSTEM DEMONSTRATION:
# The application includes a comprehensive notification system that demonstrates:
# - Email notifications (OrderCreatedNotification, OrderStatusChangedNotification)
# - Inventory management (ProductStockLowNotification, ProductOutOfStockNotification)
# - Product lifecycle (ProductCreatedNotification, ProductUpdatedNotification)
# - Background services that process notifications
# - Real-time logging of notification events
#
# 🔥 REAL-TIME STATISTICS TRACKING:
# - Session-based mediator statistics tracking
# - Global application usage metrics
# - Real-time query and command execution tracking
# - Complete type analysis and handler verification
#
# To observe the full system in action:
# 1. Start the ECommerce.Api project
# 2. Watch the console output for notification logs (📧 and 📦 emojis)
# 3. Monitor real-time statistics through the statistics endpoints
# 4. Execute the requests below to see both notifications and statistics
#
###

###
# Health Check - Swagger UI
GET {{$projectUrl}}/swagger/index.html

###
# 🔥 REAL-TIME MEDIATOR STATISTICS ENDPOINTS - Session and Global Tracking

###
# Get current session ID for statistics tracking
GET {{$projectUrl}}/api/mediator/session

###
# Get comprehensive real-time global mediator statistics
GET {{$projectUrl}}/api/mediator/statistics

###
# Get all active sessions with their statistics
GET {{$projectUrl}}/api/mediator/statistics/sessions

###
# Get statistics for a specific session (replace with actual session ID from /session endpoint)
GET {{$projectUrl}}/api/mediator/statistics/session/stats_1758006198_6cb83558

###
# Get detailed query analysis
GET {{$projectUrl}}/api/mediator/analyze/queries?detailed=true

###
# Get detailed command analysis
GET {{$projectUrl}}/api/mediator/analyze/commands?detailed=true

###
# Get complete mediator analysis (queries + commands)
GET {{$projectUrl}}/api/mediator/analyze?detailed=true

###
# Get compact query analysis
GET {{$projectUrl}}/api/mediator/analyze/queries?detailed=false

###
# Get compact command analysis  
GET {{$projectUrl}}/api/mediator/analyze/commands?detailed=false

###
# Get compact complete analysis
GET {{$projectUrl}}/api/mediator/analyze?detailed=false

###
# PRODUCT ENDPOINTS - Product management operations

###
# Get all products with pagination
GET {{$projectUrl}}/api/products?page=1&pageSize=10&searchTerm=&inStockOnly=false&activeOnly=true

###
# Get products with search filter
GET {{$projectUrl}}/api/products?page=1&pageSize=5&searchTerm=laptop&inStockOnly=false&activeOnly=true

###
# Get only products in stock
GET {{$projectUrl}}/api/products?page=1&pageSize=10&searchTerm=&inStockOnly=true&activeOnly=true

###
# Get all products including inactive ones
GET {{$projectUrl}}/api/products?page=1&pageSize=10&searchTerm=&inStockOnly=false&activeOnly=false

###
# Get product by ID
GET {{$projectUrl}}/api/products/1

###
# Get product by ID - Not found example
GET {{$projectUrl}}/api/products/9999

###
# Get low stock products (default threshold: 10)
GET {{$projectUrl}}/api/products/low-stock

###
# Get low stock products with custom threshold
GET {{$projectUrl}}/api/products/low-stock?threshold=5

###
# Create new product (triggers ProductCreatedNotification)
POST {{$projectUrl}}/api/products
Content-Type: application/json

{
  "name": "Gaming Laptop",
  "description": "High-performance gaming laptop with RTX graphics",
  "price": 1299.99,
  "stockQuantity": 15
}

###
# Create another product
POST {{$projectUrl}}/api/products
Content-Type: application/json

{
  "name": "Wireless Mouse",
  "description": "Ergonomic wireless mouse with RGB lighting",
  "price": 49.99,
  "stockQuantity": 100
}

###
# Create product with validation error (invalid data)
POST {{$projectUrl}}/api/products
Content-Type: application/json

{
  "name": "",
  "description": "Invalid product",
  "price": -10.00,
  "stockQuantity": -5
}

###
# Update existing product (triggers ProductUpdatedNotification)
PUT {{$projectUrl}}/api/products/1
Content-Type: application/json

{
  "productId": 1,
  "name": "Gaming Laptop Pro",
  "description": "Updated high-performance gaming laptop with RTX graphics",
  "price": 1399.99
}

###
# Update product stock quantity (may trigger stock notifications)
PUT {{$projectUrl}}/api/products/1/stock
Content-Type: application/json

{
  "productId": 1,
  "stockQuantity": 25
}

###
# Deactivate product
POST {{$projectUrl}}/api/products/1/deactivate

###
# ORDER ENDPOINTS - Order management operations

###
# Get all orders with pagination
GET {{$projectUrl}}/api/orders?page=1&pageSize=10

###
# Get orders by customer ID
GET {{$projectUrl}}/api/orders?page=1&pageSize=10&customerId=1

###
# Get orders by status (0=Pending, 1=Processing, 2=Shipped, 3=Delivered, 4=Cancelled)
GET {{$projectUrl}}/api/orders?page=1&pageSize=10&status=1

###
# Get orders by date range
GET {{$projectUrl}}/api/orders?page=1&pageSize=10&fromDate=2024-01-01&toDate=2024-12-31

###
# Get order by ID
GET {{$projectUrl}}/api/orders/1

###
# Get order by ID - Not found example
GET {{$projectUrl}}/api/orders/9999

###
# Get customer orders
GET {{$projectUrl}}/api/orders/customer/1

###
# Get customer orders with date filter
GET {{$projectUrl}}/api/orders/customer/1?fromDate=2024-01-01&toDate=2024-12-31

###
# Get order statistics
GET {{$projectUrl}}/api/orders/statistics

###
# Get order statistics with date filter
GET {{$projectUrl}}/api/orders/statistics?fromDate=2024-01-01&toDate=2024-12-31

###
# Create new order (triggers OrderCreatedNotification and inventory tracking)
POST {{$projectUrl}}/api/orders
Content-Type: application/json

{
  "customerId": 1,
  "customerEmail": "customer@test.com",
  "orderItems": [
    {
      "productId": 1,
      "quantity": 2,
      "unitPrice": 1299.99
    },
    {
      "productId": 2,
      "quantity": 1,
      "unitPrice": 49.99
    }
  ]
}

###
# Process complete order (create and process in one step)
POST {{$projectUrl}}/api/orders/process
Content-Type: application/json

{
  "customerId": 2,
  "customerEmail": "customer2@test.com",
  "orderItems": [
    {
      "productId": 1,
      "quantity": 1,
      "unitPrice": 1299.99
    }
  ],
  "shippingAddress": {
    "street": "123 Main St",
    "city": "Anytown",
    "state": "ST",
    "zipCode": "12345",
    "country": "USA"
  },
  "paymentInfo": {
    "paymentMethod": "CreditCard",
    "cardNumber": "**** **** **** 1234",
    "expiryMonth": 12,
    "expiryYear": 2025
  }
}

###
# Update order status (triggers OrderStatusChangedNotification)
PUT {{$projectUrl}}/api/orders/1/status
Content-Type: application/json

{
  "orderId": 1,
  "status": 2,
  "notes": "Order has been shipped via FedEx"
}

###
# Cancel order (triggers OrderStatusChangedNotification)
POST {{$projectUrl}}/api/orders/1/cancel
Content-Type: application/json

{
  "orderId": 1,
  "reason": "Customer requested cancellation"
}

###
# BATCH OPERATIONS - Create test data

###
# Create test product 1
POST {{$projectUrl}}/api/products
Content-Type: application/json

{
  "name": "Mechanical Keyboard",
  "description": "RGB mechanical keyboard with blue switches",
  "price": 129.99,
  "stockQuantity": 50
}

###
# Create test product 2
POST {{$projectUrl}}/api/products
Content-Type: application/json

{
  "name": "4K Monitor",
  "description": "32-inch 4K IPS monitor with USB-C connectivity",
  "price": 599.99,
  "stockQuantity": 8
}

###
# Create test product 3 (low stock)
POST {{$projectUrl}}/api/products
Content-Type: application/json

{
  "name": "Webcam HD",
  "description": "1080p webcam with auto-focus",
  "price": 79.99,
  "stockQuantity": 3
}

###
# Create test order 1
POST {{$projectUrl}}/api/orders
Content-Type: application/json

{
  "customerId": 101,
  "customerEmail": "customer101@test.com",
  "orderItems": [
    {
      "productId": 2,
      "quantity": 1,
      "unitPrice": 129.99
    },
    {
      "productId": 3,
      "quantity": 1,
      "unitPrice": 599.99
    }
  ]
}

###
# Create test order 2
POST {{$projectUrl}}/api/orders
Content-Type: application/json

{
  "customerId": 102,
  "customerEmail": "customer102@test.com",
  "orderItems": [
    {
      "productId": 4,
      "quantity": 2,
      "unitPrice": 79.99
    }
  ]
}

###
# ERROR SCENARIOS - Testing error handling

###
# Try to update non-existent product
PUT {{$projectUrl}}/api/products/9999
Content-Type: application/json

{
  "productId": 9999,
  "name": "Non-existent Product",
  "description": "This should fail",
  "price": 99.99
}

###
# Try to create order with invalid product
POST {{$projectUrl}}/api/orders
Content-Type: application/json

{
  "customerId": 999,
  "customerEmail": "invalid@test.com",
  "orderItems": [
    {
      "productId": 9999,
      "quantity": 1,
      "unitPrice": 99.99
    }
  ]
}

###
# Try to cancel non-existent order
POST {{$projectUrl}}/api/orders/9999/cancel
Content-Type: application/json

{
  "orderId": 9999,
  "reason": "Test cancellation"
}

###
# NOTIFICATION SYSTEM DEMONSTRATIONS
# These endpoints demonstrate the notification system with real-time logging

###
# Complete order workflow (Confirmed -> Processing -> Shipped -> Delivered)
# This will trigger multiple OrderStatusChangedNotifications
POST {{$projectUrl}}/api/orders/1/process-workflow

###
# Complete order quickly (Processing -> Shipped -> Delivered)
# This will trigger multiple email notifications
POST {{$projectUrl}}/api/orders/1/complete

###
# Reduce product stock to trigger low stock notifications
# This will demonstrate ProductStockLowNotification
POST {{$projectUrl}}/api/products/1/reduce-stock?quantity=5

###
# Reduce product stock to zero to trigger out-of-stock notifications
# This will demonstrate ProductOutOfStockNotification
POST {{$projectUrl}}/api/products/1/reduce-stock?quantity=50

###
# Simulate bulk order to trigger inventory notifications
# This will demonstrate OrderCreatedNotification and inventory management
POST {{$projectUrl}}/api/products/1/simulate-bulk-order?orderQuantity=15

###
# Simulate bulk order that exceeds stock (will trigger low stock)
# This will demonstrate multiple notifications
POST {{$projectUrl}}/api/products/2/simulate-bulk-order?orderQuantity=25

###
# Create product and then simulate order to see full notification flow
POST {{$projectUrl}}/api/products
Content-Type: application/json

{
  "name": "Test Product for Notifications",
  "description": "This product is created to demonstrate notification system",
  "price": 99.99,
  "stockQuantity": 12
}

###
# Now order the product we just created (use the returned ID)
POST {{$projectUrl}}/api/products/3/simulate-bulk-order?orderQuantity=8

###
# 🔥 REAL-TIME STATISTICS TRACKING DEMONSTRATION
# These requests demonstrate how statistics are tracked in real-time

###
# Step 1: Get initial session ID and baseline statistics
GET {{$projectUrl}}/api/mediator/session

###
# Step 2: Get initial global statistics (should show baseline)
GET {{$projectUrl}}/api/mediator/statistics

###
# Step 3: Execute various queries to generate statistics
GET {{$projectUrl}}/api/products
GET {{$projectUrl}}/api/products/1
GET {{$projectUrl}}/api/products/low-stock
GET {{$projectUrl}}/api/orders
GET {{$projectUrl}}/api/orders/statistics

###
# Step 4: Execute various commands to generate statistics
POST {{$projectUrl}}/api/products
Content-Type: application/json

{
  "name": "Statistics Demo Product",
  "description": "Product created to demonstrate statistics tracking",
  "price": 199.99,
  "stockQuantity": 20
}

###
# Create another product for statistics
POST {{$projectUrl}}/api/products
Content-Type: application/json

{
  "name": "Stats Demo 2",
  "description": "Another product for statistics demo",
  "price": 99.99,
  "stockQuantity": 50
}

###
# Create an order for statistics
POST {{$projectUrl}}/api/orders
Content-Type: application/json

{
  "customerId": 500,
  "customerEmail": "stats@demo.com",
  "orderItems": [
    {
      "productId": 1,
      "quantity": 1,
      "unitPrice": 199.99
    }
  ]
}

###
# Step 5: Check updated global statistics (should show increased counts)
GET {{$projectUrl}}/api/mediator/statistics

###
# Step 6: Check session-specific statistics (use your session ID from step 1)
GET {{$projectUrl}}/api/mediator/statistics/session/stats_1758006198_6cb83558

###
# Step 7: Check all active sessions
GET {{$projectUrl}}/api/mediator/statistics/sessions

###
# Step 8: Analyze queries and commands
GET {{$projectUrl}}/api/mediator/analyze/queries

###
# Step 9: Analyze commands
GET {{$projectUrl}}/api/mediator/analyze/commands

###
# Step 10: Get complete analysis
GET {{$projectUrl}}/api/mediator/analyze

###
# NOTIFICATION WORKFLOW DEMONSTRATION
# Follow this sequence to see the complete notification system in action

###
# Step 1: Create a product (triggers ProductCreatedNotification)
POST {{$projectUrl}}/api/products
Content-Type: application/json

{
  "name": "Notification Demo Product",
  "description": "Product created to demonstrate notification workflow",
  "price": 149.99,
  "stockQuantity": 20
}

###
# Step 2: Create an order (triggers OrderCreatedNotification + inventory notifications)
POST {{$projectUrl}}/api/orders
Content-Type: application/json

{
  "customerId": 1001,
  "customerEmail": "demo@notifications.com",
  "orderItems": [
    {
      "productId": 4,
      "quantity": 15,
      "unitPrice": 149.99
    }
  ]
}

###
# Step 3: Process the order through complete workflow (triggers multiple OrderStatusChangedNotifications)
POST {{$projectUrl}}/api/orders/2/process-workflow

###
# Step 4: Create another order to push stock to low levels (triggers ProductStockLowNotification)
POST {{$projectUrl}}/api/orders
Content-Type: application/json

{
  "customerId": 1002,
  "customerEmail": "demo2@notifications.com",
  "orderItems": [
    {
      "productId": 4,
      "quantity": 3,
      "unitPrice": 149.99
    }
  ]
}

###
# Step 5: Create final order to deplete stock (triggers ProductOutOfStockNotification)
POST {{$projectUrl}}/api/orders
Content-Type: application/json

{
  "customerId": 1003,
  "customerEmail": "demo3@notifications.com",
  "orderItems": [
    {
      "productId": 4,
      "quantity": 5,
      "unitPrice": 149.99
    }
  ]
}

###
# 🎯 COMPREHENSIVE TESTING WORKFLOW

###
# PHASE 1: Statistics Baseline
GET {{$projectUrl}}/api/mediator/session
GET {{$projectUrl}}/api/mediator/statistics
GET {{$projectUrl}}/api/mediator/analyze

###
# PHASE 2: Product Operations
POST {{$projectUrl}}/api/products
GET {{$projectUrl}}/api/products
PUT {{$projectUrl}}/api/products/1
GET {{$projectUrl}}/api/products/low-stock

###
# PHASE 3: Order Operations  
POST {{$projectUrl}}/api/orders
GET {{$projectUrl}}/api/orders
PUT {{$projectUrl}}/api/orders/1/status
GET {{$projectUrl}}/api/orders/statistics

###
# PHASE 4: Notification Triggers
POST {{$projectUrl}}/api/products/1/reduce-stock?quantity=10
POST {{$projectUrl}}/api/products/1/simulate-bulk-order?orderQuantity=5
POST {{$projectUrl}}/api/orders/1/process-workflow

###
# PHASE 5: Statistics Review
GET {{$projectUrl}}/api/mediator/statistics
GET {{$projectUrl}}/api/mediator/statistics/sessions
GET {{$projectUrl}}/api/mediator/analyze/queries
GET {{$projectUrl}}/api/mediator/analyze/commands

###
# 🔍 MONITORING AND ANALYSIS

###
# Real-time statistics monitoring (run periodically during testing)
GET {{$projectUrl}}/api/mediator/statistics

###
# Session tracking (replace with your session ID)
GET {{$projectUrl}}/api/mediator/statistics/session/YOUR_SESSION_ID_HERE

###
# Type analysis and handler verification
GET {{$projectUrl}}/api/mediator/analyze?detailed=true

###
# Query-specific analysis
GET {{$projectUrl}}/api/mediator/analyze/queries?detailed=true

###
# Command-specific analysis
GET {{$projectUrl}}/api/mediator/analyze/commands?detailed=true

###
# 📊 EXPECTED STATISTICS AFTER FULL TESTING

# After running the complete test suite, you should see statistics like:
# - UniqueQueryTypes: 8+ (GetProductsQuery, GetProductByIdQuery, GetOrdersQuery, etc.)
# - UniqueCommandTypes: 10+ (CreateProductCommand, UpdateProductCommand, CreateOrderCommand, etc.)
# - TotalQueryExecutions: 20+ (depending on number of queries executed)
# - TotalCommandExecutions: 15+ (depending on number of commands executed)
# - ActiveSessions: 1+ (your testing session)

# The analysis endpoints will show:
# - Complete handler mappings for all queries and commands
# - Handler status (Single, Missing, Multiple)
# - Type parameters and response types
# - Assembly and namespace organization

###
# 🚀 SWAGGER UI COMPREHENSIVE TESTING

# Access the complete API documentation and interactive testing at:
GET {{$projectUrl}}/swagger/index.html

# The Swagger UI provides:
# - Interactive testing of all endpoints including statistics
# - Real-time notification system demonstration
# - Complete request/response schemas
# - Statistics monitoring through the web interface
# - Type analysis and handler verification
# - Session tracking capabilities

###
# 🔔 NOTIFICATION CONSOLE OUTPUT TO WATCH FOR

# When testing, watch the console for these notification patterns:

# 📧 EMAIL NOTIFICATIONS:
# - "📧 ORDER CONFIRMATION EMAIL SENT to {email}"
# - "📧 ORDER STATUS UPDATE EMAIL SENT to {email}"
# - Shows customer email, order details, and status changes

# 📦 INVENTORY NOTIFICATIONS:
# - "📦 INVENTORY TRACKING - Order #{id} created"
# - "⚠️ LOW STOCK ALERT for Product #{id}"
# - "🚨 OUT OF STOCK ALERT - URGENT for Product #{id}"
# - "📋 REORDER NOTIFICATION SENT TO PURCHASING"

# 🔔 NOTIFICATION MIDDLEWARE:
# - "🔔 NOTIFICATION PUBLISHING: {NotificationType}"
# - "✅ NOTIFICATION COMPLETED: {NotificationType}"

# 📊 STATISTICS TRACKING:
# - Real-time updates to query and command execution counts
# - Session creation and tracking messages
# - Type discovery and analysis results
