@page "/streaming-interactive"
@using System.Net.Http
@using System.Net.Http.Json
@using System.Text
@using System.Text.Json
@using Microsoft.AspNetCore.Components.WebAssembly.Http
@using Microsoft.AspNetCore.Components.Web
@using Streaming.Api.Shared.DTOs
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@implements IDisposable

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <h1 class="mb-4">
                <i class="bi bi-broadcast me-2"></i>
                Contact Streaming (WebAssembly Interactive)
            </h1>
            <p class="lead">
                This page demonstrates real-time streaming using WebAssembly with Server-Sent Events (SSE).
                Data is streamed directly from the API using modern web standards.
            </p>
        </div>
    </div>

    <div class="row mb-4">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">
                        <i class="bi bi-broadcast me-2"></i>
                        Real-time Streaming Controls
                    </h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label for="searchInput" class="form-label">Search Filter</label>
                            <div class="input-group">
                                <input value="@searchTerm" @onkeypress="HandleKeyPress" @oninput="OnSearchChanged"
                                       class="form-control" id="searchInput" 
                                       placeholder="Search contacts..." />
                                <button class="btn btn-outline-secondary" type="button" @onclick="OnSearchButtonClick" title="Search">
                                    üîç
                                </button>
                            </div>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="streamType" class="form-label">Stream Type</label>
                            <select @bind="streamType" class="form-select" id="streamType">
                                <option value="sse">Server-Sent Events</option>
                                <option value="json">JSON Stream</option>
                                <option value="metadata">With Metadata</option>
                            </select>
                        </div>
                    </div>
                    <div class="d-flex gap-2">
                        <button @onclick="StartStreaming" class="btn btn-success" disabled="@isStreaming">
                            <i class="bi bi-play-fill me-1"></i>
                            @(isStreaming ? "Streaming..." : "Start Stream")
                        </button>
                        <button @onclick="StopStreaming" class="btn btn-danger" disabled="@(!isStreaming)">
                            <i class="bi bi-stop-fill me-1"></i>
                            Stop Stream
                        </button>
                        <button @onclick="ClearResults" class="btn btn-outline-secondary">
                            <i class="bi bi-trash me-1"></i>
                            Clear
                        </button>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">
                        <i class="bi bi-speedometer2 me-2"></i>
                        Performance
                    </h5>
                </div>
                <div class="card-body">
                    <div class="text-center">
                        <div class="h5 text-primary">@contactCount.ToString("#,##0")</div>
                        <small class="text-muted">Contacts Received</small>
                    </div>
                    <div class="mt-3 text-center">
                        <div class="h5 text-success">@(itemsPerSecond.ToString("#,##0.##")) items/sec</div>
                        <small class="text-muted">Streaming Rate</small>
                    </div>
                    <div class="mt-3 text-center">
                        <div class="h5 text-info">@(streamDurationMs.ToString("#,##0")) ms</div>
                        <small class="text-muted">Stream Duration</small>
                    </div>
                    @if (lastEventTime.HasValue)
                    {
                        <div class="mt-3 text-center">
                            <small class="text-muted">
                                Last event: @lastEventTime.Value.ToString("HH:mm:ss.fff")
                            </small>
                        </div>
                    }
                    <div class="mt-3">
                        <div class="form-check form-switch">
                            <input class="form-check-input" type="checkbox" @bind="autoScroll" id="autoScrollCheck">
                            <label class="form-check-label" for="autoScrollCheck">
                                Auto Scroll
                            </label>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">
                        <i class="bi bi-table me-2"></i>
                        Live Stream Results
                    </h5>
                    <div class="d-flex align-items-center gap-3">
                        @if (connectionStatus != "disconnected")
                        {
                            <span class="badge bg-@(connectionStatus == "connected" ? "success" : "warning")">
                                <i class="bi bi-@(connectionStatus == "connected" ? "wifi" : "wifi-off") me-1"></i>
                                @connectionStatus.ToUpper()
                            </span>
                        }
                        @if (isStreaming)
                        {
                            <div class="spinner-border spinner-border-sm text-primary" role="status">
                                <span class="visually-hidden">Streaming...</span>
                            </div>
                        }
                    </div>
                </div>
                <div class="card-body" style="max-height: 600px; overflow-y: auto;" data-scroll-container @ref="resultsContainer">
                    @if (contactCount > 0 && contacts.Any())
                    {
                        <div class="row g-3">
                            @foreach (var contact in contacts.TakeLast(displayLimit))
                            {
                                <div class="col-md-6 col-lg-4">
                                    <div class="card h-100 contact-card">
                                        <div class="card-body p-3">
                                            <div class="d-flex align-items-center mb-2">
                                                <img src="@contact.Avatar" alt="Avatar" 
                                                     class="rounded-circle me-3" style="width: 50px; height: 50px;" />
                                                <div class="flex-grow-1">
                                                    <h6 class="card-title mb-1">@contact.FullName</h6>
                                                    <small class="text-muted">ID: @contact.Id</small>
                                                </div>
                                            </div>
                                            <div class="contact-details">
                                                <div class="mb-1">
                                                    <i class="bi bi-envelope me-1 text-primary"></i>
                                                    <small>@contact.Email</small>
                                                </div>
                                                <div class="mb-1">
                                                    <i class="bi bi-building me-1 text-success"></i>
                                                    <small>@contact.Company</small>
                                                </div>
                                                <div class="mb-1">
                                                    <i class="bi bi-geo-alt me-1 text-warning"></i>
                                                    <small>@contact.City, @contact.Country</small>
                                                </div>
                                                <div>
                                                    <i class="bi bi-telephone me-1 text-info"></i>
                                                    <small>@contact.Phone</small>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                        
                        @if (contacts.Count > displayLimit)
                        {
                            <div class="alert alert-info mt-3">
                                <i class="bi bi-info-circle me-2"></i>
                                Showing last @displayLimit of @contacts.Count contacts. 
                                <button @onclick="IncreaseDisplayLimit" class="btn btn-sm btn-outline-primary ms-2">
                                    Show More
                                </button>
                            </div>
                        }
                    }
                    else if (!isStreaming && contactCount == 0)
                    {
                        <div class="text-center text-muted py-5">
                            <i class="bi bi-broadcast display-1"></i>
                            <p class="mt-3">No contacts loaded. Start streaming to see live data.</p>
                        </div>
                    }
                    else if (isStreaming && contactCount == 0)
                    {
                        <div class="text-center py-5">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Connecting...</span>
                            </div>
                            <p class="mt-3 text-muted">Establishing connection...</p>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<style>
.contact-card {
    transition: transform 0.2s, box-shadow 0.2s;
    animation: slideIn 0.3s ease-out;
}

.contact-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0,0,0,0.1);
}

@@keyframes slideIn {
    from { 
        opacity: 0; 
        transform: translateY(20px); 
    }
    to { 
        opacity: 1; 
        transform: translateY(0); 
    }
}

.contact-details {
    font-size: 0.85rem;
}
</style>

@code {
    private readonly List<ContactDto> contacts = new();
    private string searchTerm = string.Empty;
    private string streamType = "sse";
    private bool isStreaming = false;
    private string connectionStatus = "disconnected";
    private int contactCount = 0;
    private DateTime streamStartTime;
    private DateTime? lastEventTime;
    private double itemsPerSecond = 0;
    private double streamDurationMs = 0;
    private bool autoScroll = true;
    private int displayLimit = 12;
    private ElementReference resultsContainer;
    private CancellationTokenSource? cancellationTokenSource;

    private async Task StartStreaming()
    {
        if (isStreaming) return;

        // Cancel any existing streaming operation
        cancellationTokenSource?.Cancel();
        cancellationTokenSource?.Dispose();
        cancellationTokenSource = new CancellationTokenSource();

        // Reset state for new streaming session
        isStreaming = true;
        contactCount = 0;
        contacts.Clear();
        streamStartTime = DateTime.Now;
        connectionStatus = "connecting";
        StateHasChanged();

        try
        {
            var searchParam = string.IsNullOrWhiteSpace(searchTerm) ? "" : $"?search={Uri.EscapeDataString(searchTerm)}";
            var url = streamType switch
            {
                "metadata" => $"/api/contacts/stream/metadata/sse{searchParam}",
                "json" => $"/api/contacts/stream{searchParam}",
                _ => $"/api/contacts/stream/sse{searchParam}"
            };

            if (streamType == "sse" || streamType == "metadata")
            {
                await StartServerSentEvents(url, cancellationTokenSource.Token);
            }
            else
            {
                await LoadJsonStream(cancellationTokenSource.Token);
            }
        }
        catch (OperationCanceledException)
        {
            // Streaming was cancelled - this is expected behavior
            connectionStatus = "disconnected";
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", $"Streaming error: {ex.Message}");
            connectionStatus = "error";
        }
        finally
        {
            isStreaming = false;
            if (connectionStatus != "error" && connectionStatus != "disconnected")
                connectionStatus = "disconnected";
            StateHasChanged();
        }
    }

    private async Task StartServerSentEvents(string url, CancellationToken cancellationToken)
    {
        try
        {
            connectionStatus = "connected";
            StateHasChanged();

            // Enable browser response streaming for WebAssembly
            using var request = new HttpRequestMessage(HttpMethod.Get, url);
            request.SetBrowserResponseStreamingEnabled(true);
            
            using var response = await Http.SendAsync(request, HttpCompletionOption.ResponseHeadersRead, cancellationToken);
            response.EnsureSuccessStatusCode();

            using var stream = await response.Content.ReadAsStreamAsync(cancellationToken);
            using var reader = new StreamReader(stream);

            string? line;
            var eventData = new StringBuilder();
            string? eventType = null;

            while ((line = await reader.ReadLineAsync(cancellationToken)) != null)
            {
                cancellationToken.ThrowIfCancellationRequested();

                if (line.StartsWith("event: "))
                {
                    eventType = line.Substring(7).Trim();
                }
                else if (line.StartsWith("data: "))
                {
                    if (eventData.Length > 0)
                        eventData.AppendLine();
                    eventData.Append(line.Substring(6));
                }
                else if (string.IsNullOrEmpty(line) && eventData.Length > 0)
                {
                    // Process complete event
                    var dataString = eventData.ToString();
                    
                    if (eventType == "data" || eventType == null) // Handle both explicit "data" events and default events
                    {
                        try
                        {
                            ContactDto? contact = null;

                            // Try to parse as StreamResponse<ContactDto> first (for metadata format)
                            if (streamType == "metadata")
                            {
                                try
                                {
                                    var streamResponse = JsonSerializer.Deserialize<StreamResponse<ContactDto>>(dataString, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
                                    contact = streamResponse?.Data;
                                }
                                catch (JsonException)
                                {
                                    // Fall back to direct parsing
                                }
                            }

                            // If metadata parsing failed or not metadata type, try direct ContactDto parsing
                            if (contact == null)
                            {
                                contact = JsonSerializer.Deserialize<ContactDto>(dataString, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
                            }

                            if (contact != null)
                            {
                                await AddContact(contact);
                            }
                        }
                        catch (JsonException ex)
                        {
                            await JSRuntime.InvokeVoidAsync("console.error", $"SSE JSON parsing error: {ex.Message}", dataString);
                        }
                    }
                    else if (eventType == "complete")
                    {
                        break;
                    }
                    
                    // Reset for next event
                    eventType = null;
                    eventData.Clear();
                }
            }

            // Final UI update to ensure all contacts are displayed
            await InvokeAsync(StateHasChanged);
        }
        catch (OperationCanceledException)
        {
            // Expected when cancellation is requested
            throw;
        }
        catch (Exception ex)
        {
            connectionStatus = "error";
            await JSRuntime.InvokeVoidAsync("console.error", $"SSE streaming error: {ex.Message}");
            throw;
        }
    }

    private async Task LoadJsonStream(CancellationToken cancellationToken)
    {
        try
        {
            connectionStatus = "connected";
            contactCount = 0;
            streamStartTime = DateTime.Now;
            StateHasChanged();

            var searchParam = string.IsNullOrWhiteSpace(searchTerm) ? "" : $"?search={Uri.EscapeDataString(searchTerm)}";
            var url = $"/api/contacts/stream{searchParam}";
            
            // Use HttpClient.SendAsync with cancellation token for better cancellation support
            using var request = new HttpRequestMessage(HttpMethod.Get, url);
            request.SetBrowserResponseStreamingEnabled(true);
            using var response = await Http.SendAsync(request, HttpCompletionOption.ResponseHeadersRead, cancellationToken);
            response.EnsureSuccessStatusCode();

            // Stream the JSON response and deserialize individual objects as they become available
            using var stream = await response.Content.ReadAsStreamAsync(cancellationToken);
            
            // Use JsonSerializer.DeserializeAsyncEnumerable for true streaming
            var asyncEnumerable = JsonSerializer.DeserializeAsyncEnumerable<ContactDto>(stream, 
                new JsonSerializerOptions { PropertyNameCaseInsensitive = true }, 
                cancellationToken);

            var batchSize = 3;
            var batchCount = 0;
            var delayMs = 80;

            await foreach (var contact in asyncEnumerable.WithCancellation(cancellationToken))
            {
                cancellationToken.ThrowIfCancellationRequested();
                
                if (contact != null)
                {
                    await AddContact(contact);
                    batchCount++;
                    
                    // Add a small delay every few items for visual streaming effect
                    if (batchCount % batchSize == 0)
                    {
                        await Task.Delay(delayMs, cancellationToken);
                    }
                }
            }

            // Final UI update to ensure all contacts are displayed
            await InvokeAsync(StateHasChanged);
            connectionStatus = "disconnected";
        }
        catch (OperationCanceledException)
        {
            // Expected when cancellation is requested
            connectionStatus = "disconnected";
            throw;
        }
        catch (Exception ex)
        {
            connectionStatus = "error";
            await JSRuntime.InvokeVoidAsync("console.error", $"JSON stream error: {ex.Message}");
            throw;
        }
    }

    private async Task AddContact(ContactDto contact)
    {
        contacts.Add(contact);
        contactCount++;
        lastEventTime = DateTime.Now;

        var elapsed = DateTime.Now - streamStartTime;
        itemsPerSecond = contactCount / Math.Max(elapsed.TotalSeconds, 0.001);
        streamDurationMs = elapsed.TotalMilliseconds;

        // Update UI more frequently for better real-time feel
        if (contactCount % 2 == 0 || contactCount <= 5)
        {
            await InvokeAsync(StateHasChanged);
            
            if (autoScroll)
            {
                await ScrollToBottom();
            }
        }
    }

    private void StopStreaming()
    {
        try
        {
            cancellationTokenSource?.Cancel();
        }
        catch (ObjectDisposedException)
        {
            // Ignore if already disposed
        }
        
        cancellationTokenSource?.Dispose();
        cancellationTokenSource = null;
        isStreaming = false;
        connectionStatus = "disconnected";
        StateHasChanged();
    }

    private void ClearResults()
    {
        StopStreaming();
        contacts.Clear();
        contactCount = 0;
        itemsPerSecond = 0;
        streamDurationMs = 0;
        lastEventTime = null;
        displayLimit = 12;
        StateHasChanged();
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            if (isStreaming)
            {
                StopStreaming();
                await Task.Delay(100);
            }
            await StartStreaming();
        }
    }

    private void IncreaseDisplayLimit()
    {
        displayLimit += 12;
        StateHasChanged();
    }

    private async Task ScrollToBottom()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("eval", $"document.querySelector('[data-scroll-container]').scrollTop = document.querySelector('[data-scroll-container]').scrollHeight");
        }
        catch
        {
            // Ignore scroll errors
        }
    }

    private async Task OnSearchChanged(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? string.Empty;
        
        // Restart streaming automatically if currently streaming
        if (isStreaming)
        {
            StopStreaming();
            await Task.Yield();
            await StartStreaming();
        }
    }

    private async Task OnSearchButtonClick()
    {
        if (isStreaming)
        {
            StopStreaming();
            await Task.Yield();
        }
        await StartStreaming();
    }

    public void Dispose()
    {
        cancellationTokenSource?.Cancel();
        cancellationTokenSource?.Dispose();
    }
}
