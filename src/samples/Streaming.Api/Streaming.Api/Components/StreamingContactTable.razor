@rendermode InteractiveServer
@using Blazing.Mediator
@using Streaming.Api.Shared.DTOs
@using Streaming.Api.Requests
@using Microsoft.AspNetCore.Components.Web
@inject IMediator Mediator
@inject IJSRuntime JSRuntime

<div class="card">
    <div class="card-header d-flex justify-content-between align-items-center">
        <h5 class="mb-0">
            <i class="bi bi-list-ul me-2"></i>
            @if (isLoading)
            {
                <span>Streaming Contacts (@contacts.Count)</span>
                <span class="spinner-border spinner-border-sm ms-2" role="status" aria-hidden="true"></span>
            }
            else
            {
                <span>Loaded Contacts (@contacts.Count)</span>
            }
        </h5>
        <div class="d-flex align-items-center gap-3">
            <small class="text-muted">
                @if (!string.IsNullOrEmpty(SearchTerm))
                {
                    <span>Filtered by: "<strong>@SearchTerm</strong>"</span>
                }
                else
                {
                    <span>All contacts</span>
                }
                @if (isLoading)
                {
                    <span class="ms-2 badge bg-primary">Streaming...</span>
                }
            </small>
            
            @if (contacts.Any() || isLoading)
            {
                <div class="form-check form-switch mb-0">
                    <input class="form-check-input" type="checkbox" @bind="autoScrollEnabled" id="autoScrollCheck">
                    <label class="form-check-label" for="autoScrollCheck">
                        Auto Scroll
                    </label>
                </div>
            }
        </div>
    </div>
    <div class="card-body">
        <div class="row mb-3">
            <div class="col-md-8">
                <div class="d-flex align-items-center gap-3">
                    <div class="text-center">
                        <div class="h4 text-primary mb-0">@contacts.Count</div>
                        <small class="text-muted">@(isLoading ? "Loading..." : "Loaded")</small>
                    </div>
                    <div class="text-center">
                        <div class="h4 text-success mb-0">@loadDuration.TotalSeconds.ToString("F1")s</div>
                        <small class="text-muted">Total Duration</small>
                    </div>
                    <div class="text-center">
                        <div class="h4 text-info mb-0">@streamDuration.TotalSeconds.ToString("F1")s</div>
                        <small class="text-muted">Stream Duration</small>
                    </div>
                </div>
            </div>
            <div class="col-md-4 text-end">
                @if (isLoading)
                {
                    <div class="progress" style="height: 6px; width: 200px; display: inline-block;">
                        <div class="progress-bar progress-bar-striped progress-bar-animated" 
                             role="progressbar" 
                             style="width: @(Math.Min(100, (contacts.Count * 100.0 / BatchSize)))%"></div>
                    </div>
                    <div class="mt-1">
                        <small class="text-muted">
                            Streaming @contacts.Count of @BatchSize contacts...
                        </small>
                    </div>
                }
                else if (contacts.Any())
                {
                    <small class="text-muted">
                        Completed at: @loadTime.ToString("HH:mm:ss")
                    </small>
                }
            </div>
        </div>

        @if (contacts.Any())
        {
            <div class="table-responsive" style="max-height: 600px; overflow-y: auto;" @ref="tableContainer">
                <table class="table table-hover table-sm mb-0">
                    <thead class="table-dark sticky-top">
                        <tr>
                            <th>#</th>
                            <th>Name</th>
                            <th>Email</th>
                            <th>Company</th>
                            <th>Country</th>
                            <th>City</th>
                        </tr>
                    </thead>
                    <tbody>
                        @for (int i = 0; i < contacts.Count; i++)
                        {
                            var contact = contacts[i];
                            <tr>
                                <td class="text-muted">@(i + 1)</td>
                                <td>
                                    <div class="d-flex align-items-center">
                                        <div class="avatar-sm me-2">
                                            @{
                                                var firstInitial = !string.IsNullOrEmpty(contact.FirstName) ? contact.FirstName[0] : '?';
                                                var lastInitial = !string.IsNullOrEmpty(contact.LastName) ? contact.LastName[0] : '?';
                                            }
                                            @firstInitial@lastInitial
                                        </div>
                                        @contact.FirstName @contact.LastName
                                    </div>
                                </td>
                                <td>@contact.Email</td>
                                <td>@contact.Company</td>
                                <td>
                                    <span class="badge bg-secondary">@contact.Country</span>
                                </td>
                                <td>
                                    <i class="bi bi-person me-1"></i>
                                    @contact.City
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
        else if (!isLoading)
        {
            <div class="text-center py-5">
                <i class="bi bi-inbox display-4 text-muted"></i>
                <h5 class="mt-3 text-muted">No Contacts Loaded</h5>
                <p class="text-muted">Submit the form above to start streaming contacts!</p>
            </div>
        }
    </div>
</div>

<style>
    .avatar-sm {
        width: 32px;
        height: 32px;
        background: linear-gradient(45deg, #6c757d, #495057);
        color: white;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 0.75rem;
        font-weight: bold;
    }

    .table-responsive {
        border-radius: 0.375rem;
    }
</style>

@code {
    private List<ContactDto> contacts = new();
    private bool isLoading = false;
    private DateTime loadTime;
    private TimeSpan loadDuration;
    private TimeSpan streamDuration;

    [Parameter] public string SearchTerm { get; set; } = "";
    [Parameter] public int BatchSize { get; set; } = 50;
    [Parameter] public bool StartStreaming { get; set; } = false;

    private string lastSearchTerm = "";
    private int lastBatchSize = 0;
    private bool lastStartStreaming = false;
    private bool hasRendered = false;
    private bool autoScrollEnabled = true;
    private ElementReference tableContainer;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            hasRendered = true;
            
            // Check if we should start streaming after first render
            if (StartStreaming && !isLoading)
            {
                lastSearchTerm = SearchTerm;
                lastBatchSize = BatchSize;
                lastStartStreaming = StartStreaming;
                
                await LoadContacts();
            }
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        // Only start streaming if we've rendered and parameters changed
        if (hasRendered && StartStreaming && !isLoading && 
            (SearchTerm != lastSearchTerm || BatchSize != lastBatchSize || StartStreaming != lastStartStreaming))
        {
            lastSearchTerm = SearchTerm;
            lastBatchSize = BatchSize;
            lastStartStreaming = StartStreaming;
            
            await LoadContacts();
        }
    }

    private async Task LoadContacts()
    {
        if (isLoading) return;

        isLoading = true;
        var startTime = DateTime.Now;
        contacts.Clear();

        try
        {
            // Use the SearchTerm parameter directly
            var searchTerm = string.IsNullOrWhiteSpace(SearchTerm) ? "" : SearchTerm.Trim();
            
            var request = new StreamContactsRequest 
            { 
                SearchTerm = searchTerm
            };

            // Track streaming duration separately
            var streamStartTime = DateTime.Now;
            var processedCount = 0;
            
            // Stream results and update UI as they come in
            await foreach (var contact in Mediator.SendStream(request))
            {
                contacts.Add(contact);
                processedCount++;
                
                // Update UI every 50 records for real-time streaming visual feedback
                if (processedCount % 50 == 0)
                {
                    await Task.Yield();
                    await InvokeAsync(StateHasChanged);
                    
                    // Auto scroll if enabled
                    if (autoScrollEnabled)
                    {
                        await ScrollToBottom();
                    }
                }
                
                // Limit to prevent excessive page sizes using the BatchSize parameter
                if (contacts.Count >= BatchSize)
                {
                    break;
                }
            }
            
            var streamEndTime = DateTime.Now;
            streamDuration = streamEndTime - streamStartTime;

            loadTime = DateTime.Now;
            loadDuration = loadTime - startTime;
            
            // Final UI update to ensure everything is displayed
            await Task.Yield();
            await InvokeAsync(StateHasChanged);
            
            // Final auto scroll if enabled
            if (autoScrollEnabled)
            {
                await ScrollToBottom();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Loading error: {ex.Message}");
            Console.WriteLine($"Stack trace: {ex.StackTrace}");
        }
        finally
        {
            isLoading = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task ScrollToBottom()
    {
        if (!autoScrollEnabled) return;
        
        try
        {
            await JSRuntime.InvokeVoidAsync("scrollToBottom", tableContainer);
        }
        catch
        {
            // Ignore scroll errors if JavaScript is not available
        }
    }
}
